commit 3fbce5152183d9ba8574ede1d8344d570cfdcb69
Author: CODeRUS <coderusinbox@gmail.com>
Date:   Thu Jan 29 07:22:04 2015 +0500

    v0.0.7

diff --git a/usr/share/lipstick-jolla-home-qt5/lockscreen/Lockscreen.qml b/usr/share/lipstick-jolla-home-qt5/lockscreen/Lockscreen.qml
index f34b51b..47b2535 100644
--- a/usr/share/lipstick-jolla-home-qt5/lockscreen/Lockscreen.qml
+++ b/usr/share/lipstick-jolla-home-qt5/lockscreen/Lockscreen.qml
@@ -34,6 +34,29 @@ MouseArea {
 
     property Item accessNotificationsHint
 
+    property int currentX: 0
+
+    onPositionChanged: {
+        if (pressed && musicControl.mprisConfig.useGestures && musicControl.visible) {
+            currentX = mouse.x - startX
+            var preX = currentX / 4
+            if ((preX < 0 && musicControl.mprisControl.canGoNext) || (preX > 0 && musicControl.mprisControl.canGoPrevious))
+                x = preX
+        }
+    }
+
+    onClicked: {
+        if (leftActionIcon.accepted) {
+            musicControl.mprisControl.next()
+        }
+        else if (rightActionIcon.accepted) {
+            musicControl.mprisControl.previous()
+        }
+        mouse.accepted = x != 0
+        x = 0
+    }
+    onCanceled: x = 0
+
     onOnDisplayChanged: {
         if (onDisplay) {
             if (desktop.animating) {
@@ -248,7 +271,199 @@ MouseArea {
         }
     }
 
+    Item {
+        id: musicControl
+        anchors.bottom: ongoingCall.enabled ? ongoingCall.top : clock.top
+        width: parent.width
+        height: column.height
+        property QtObject mprisControl
+        property QtObject mprisConfig
+        property QtObject feedbackEffect
+        property string mprisService: "org.mpris.MediaPlayer2.jolla-mediaplayer"
+        property bool displayActive: true
+        property bool mprisActive: mprisControl && (displayActive || sneakPeekHint.sneakPeekActive)
+        onMprisActiveChanged: if (mprisControl) mprisControl.active = mprisActive
+        enabled: lockscreenVisible
+        visible: mprisControl ? mprisControl.active : false
+        onEnabledChanged: {
+            if (mprisControl) {
+                mprisControl.active = enabled && displayActive
+            }
+            if (!enabled) {
+                mediaName.setDefaultMarqueeOffset()
+            }
+        }
+        opacity: (lockScreen.width - Math.abs(lockScreen.x) * 8) / lockScreen.width
+
+        Component.onCompleted: {
+            mprisConfig = Qt.createQmlObject('import QtQuick 2.0; import org.nemomobile.configuration 1.0; ConfigurationGroup {path: "/desktop/lipstick-jolla-home/mprisService"; property string serviceName: musicControl.mprisService; property bool useGestures: true; property bool showProgress: true}', musicControl)
+            mprisService = mprisConfig.serviceName
+            mprisConfig.serviceNameChanged.connect(function() { mprisService = mprisConfig.serviceName; })
+            mprisControl = Qt.createQmlObject('import QtQuick 2.0; import org.coderus.mpris 2.0 as Mpris2; Mpris2.Control {service: musicControl.mprisService}', musicControl)
+            feedbackEffect = Qt.createQmlObject("import QtQuick 2.0; import QtFeedback 5.0; ThemeEffect { effect: ThemeEffect.Press }", musicControl);
+        }
+
+        Column {
+            id: column
+            anchors {
+                left: parent.left
+                right: parent.right
+                margins: Theme.paddingLarge
+            }
+
+            Item {
+                id: marqueeItem
+                height: mediaName.height
+                width: parent.width
+                clip: true
+
+                Label {
+                    id: mediaName
+                    property bool shouldMarquee: false
+                    property int marqueeOffset: 0
+                    text: musicControl.mprisControl.metadata["xesam:title"] ? (musicControl.mprisControl.metadata["xesam:artist"] + " - " + musicControl.mprisControl.metadata["xesam:title"]) : ""
+                    onTextChanged: setDefaultMarqueeOffset()
+                    x: mediaName.marqueeOffset
+                    function setDefaultMarqueeOffset() {
+                        marqueeOffset = shouldMarquee ? 0 : ((marqueeItem.width - width) / 2)
+                        shouldMarquee = width > marqueeItem.width
+                    }
+                }
+
+                Timer {
+                    id: marqueeTimer
+                    interval: 1000
+                    running: lockscreenVisible && mediaName.shouldMarquee
+                    repeat: true
+                    property int offset: -1
+                    onTriggered: {
+                        if (mediaName.width + mediaName.marqueeOffset > marqueeItem.width) {
+                            mediaName.marqueeOffset += marqueeTimer.offset
+                            if (mediaName.width + mediaName.marqueeOffset <= marqueeItem.width) {
+                            	interval = 1000
+                            }
+                            else {
+	                            interval = 10
+	                        }
+                        }
+                        else {
+                            mediaName.marqueeOffset = 0
+                            interval = 1000
+                        }
+                    }
+                }
+            }
+
+            Item {
+                width: parent.width
+                height: Theme.itemSizeSmall
+                clip: true
+                visible: musicControl.mprisConfig.showProgress
+
+	            ProgressBar {
+	            	id: positionProgress
+	                width: parent.width
+	                anchors {
+	                	top: parent.top
+	                	topMargin: - Theme.paddingLarge
+	                }
+	                minimumValue: 0
+	                maximumValue: musicControl.mprisControl.metadata["mpris:length"] ? musicControl.mprisControl.metadata["mpris:length"] : 1000000
+	                value: musicControl.mprisControl.position
+	                valueText: Format.formatDuration(value / 1000000, Format.DurationShort)
+	            }
+
+	            Timer {
+	            	interval: 1000
+	            	running: musicControl.mprisControl.playbackStatus == "Playing" && musicControl.mprisControl.active
+	            	onTriggered: musicControl.mprisControl.initialize()
+	            }
+            }
+
+            Row {
+                height: Theme.itemSizeMedium
+                visible: musicControl.displayActive
+                enabled: !stupidTimer.running
+                Item {
+                    width: column.width / 3
+                    height: parent.height
+
+                    IconButton {
+                        icon.source: "image://theme/icon-m-previous"
+                        anchors.centerIn: parent
+                        enabled: musicControl.mprisControl.canGoPrevious
+                        onClicked: {
+                        	stupidTimer.start()
+                            musicControl.mprisControl.previous()
+                            musicControl.feedbackEffect.play()
+                        }
+                    }
+                }
+                Item {
+                    width: column.width / 3
+                    height: parent.height
+
+                    IconButton {
+                        icon.source: musicControl.mprisControl.playbackStatus == "Playing" ? "image://theme/icon-m-pause" : "image://theme/icon-m-play"
+                        anchors.centerIn: parent
+                        enabled: musicControl.mprisControl.playbackStatus == "Playing" ? musicControl.mprisControl.canPause : musicControl.mprisControl.canPlay
+                        onClicked: {
+                            musicControl.mprisControl.playPause()
+                            musicControl.feedbackEffect.play()
+                        }
+                    }
+                }
+                Item {
+                    width: column.width / 3
+                    height: parent.height
+
+                    IconButton {
+                        icon.source: "image://theme/icon-m-next"
+                        anchors.centerIn: parent
+                        enabled: musicControl.mprisControl.canGoNext
+                        onClicked: {
+                        	stupidTimer.start()
+                            musicControl.mprisControl.next()
+                            musicControl.feedbackEffect.play()
+                        }
+                    }
+                }
+                Timer {
+                	id: stupidTimer
+                	interval: 1000
+                	onTriggered: musicControl.mprisControl.initialize()
+                }
+            }
+        }
+
+        Image {
+            id: leftActionIcon
+            property bool accepted: visible && x == (lockScreen.width / 2 - width / 2 - lockScreen.x)
+            source: "image://theme/icon-cover-next-song" + (accepted ? ("?" + Theme.highlightColor) : "")
+            visible: musicControl.mprisControl.canGoNext && musicControl.visible && lockScreen.x < 0
+            opacity: accepted ? 1.0 : (lockScreen.width - (x + lockScreen.x)) / (lockScreen.width / 2)
+            anchors.verticalCenter: musicControl.verticalCenter
+            property int calculatedX: lockScreen.width + lockScreen.currentX * 3 - lockScreen.x
+            x: calculatedX < (lockScreen.width / 2 - width / 2 - lockScreen.x) ? (lockScreen.width / 2 - width / 2 - lockScreen.x) : calculatedX
+            onAcceptedChanged: if (accepted) musicControl.feedbackEffect.play()
+        }
+
+        Image {
+            id: rightActionIcon
+            rotation: 180
+            property bool accepted: visible && x == (lockScreen.width / 2 - width / 2  - lockScreen.x)
+            source: "image://theme/icon-cover-next-song" + (accepted ? ("?" + Theme.highlightColor) : "")
+            visible: musicControl.mprisControl.canGoPrevious && musicControl.visible && lockScreen.x > 0
+            opacity: accepted ? 1.0 : (x + lockScreen.x) / (lockScreen.width / 2)
+            anchors.verticalCenter: musicControl.verticalCenter
+            property int calculatedX: lockScreen.currentX * 3 - width - lockScreen.x
+            x: calculatedX > (lockScreen.width / 2 - width / 2 - lockScreen.x) ? (lockScreen.width / 2 - width / 2 - lockScreen.x) : calculatedX
+            onAcceptedChanged: if (accepted) musicControl.feedbackEffect.play()
+        }
+    }
+
     OngoingCall {
+        id: ongoingCall
         anchors.bottom: clock.top
     }
 
@@ -263,8 +478,9 @@ MouseArea {
                 dashboard.cancelFlick()
                 dashboard.snapToPage(0, true)
             }
+            musicControl.displayActive = false
         }
-
+        onDisplayOn: musicControl.displayActive = true
         onDisplayAboutToBeOn: {
             lockScreen.state = "showDateImmediately"
             sneakPeekHint.sneakPeekActive = lipstickSettings.lowPowerMode
diff --git a/usr/share/lipstick-jolla-home-qt5/main.qml b/usr/share/lipstick-jolla-home-qt5/main.qml
index 0d59e00..50a993e 100644
--- a/usr/share/lipstick-jolla-home-qt5/main.qml
+++ b/usr/share/lipstick-jolla-home-qt5/main.qml
@@ -459,7 +459,7 @@ ApplicationWindow {
                 onPositionChanged: {
                     if (Math.abs(mouseX - startX) > 3*Theme.startDragDistance) {
                         preventStealing = true
-                        if (!scrollHintAnimation.running) {
+                        if (!mouse.accepted && !scrollHintAnimation.running) {
                             // While the screen is pressed, the animation will be
                             // in the paused state, but that's okay, as we do not
                             // want the content to "detach" from the finger while
@@ -471,7 +471,7 @@ ApplicationWindow {
 
                 onClicked: {
                     // Only start if it's not already started (even if paused)
-                    if (!scrollHintAnimation.running && !scrollHintAnimation.paused) {
+                    if (!mouse.accepted && !scrollHintAnimation.running && !scrollHintAnimation.paused) {
                         scrollHintAnimation.start()
                     }
                 }
